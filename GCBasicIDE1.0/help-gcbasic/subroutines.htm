<html><head>
   <title>Subroutines</title>
   <meta name="generator"  content="HelpMaker.net" >
   <meta name="keywords"  content="," ></head>
<body bgcolor="FFFCEA" >
<table width="100%"  border="0"  cellspacing="0"  cellpadding="2"  bgcolor="C0C0C0" >
  <tr>
    <td align="left" >
      <div align="left" ><font face="Arial"  size="4" ><span style="font-size:14pt" >Subroutines</span></font><font color="#010101" ></font></div>

    </td>
    <td align="right" >
      <font face="Arial"  size="2" >
        <a href="scripts.htm">Previous</a>&nbsp;&nbsp;<a href="variables.htm">Next</a>
      </font>
    </td>
  </tr></table>
<hr><div align="left" ><font face="Arial"  color="#010101" ><span style="font-size:12pt" ><b>About Subroutines</b></span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><font face="Arial" ><span style="font-size:12pt" >A subroutine is a small program inside of the main program. Subroutines 
are typically used when a task needs to be repeated several times in 
different parts of the main program.</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><br></div><font color="#010101" ><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ></font><font face="Arial" ><span style="font-size:12pt" >There are two main uses for subroutines:</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:25mm; margin-right:0mm; text-indent:-6mm; " ><font face="Symbol" ><span style="font-size:10pt" >&middot;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><font face="Arial" ><span style="font-size:12pt" >Keeping programs neat and easy to read</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:25mm; margin-right:0mm; text-indent:-6mm; " ><font face="Symbol" ><span style="font-size:10pt" >&middot;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><font face="Arial" ><span style="font-size:12pt" >Reducing the size of programs by allowing common sections 
of code to be reused.</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><br></div><font color="#010101" ><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ></font><font face="Arial" ><span style="font-size:12pt" >When the PIC comes to a subroutine it saves its location in the current 
program before jumping to the start of, or calling, the subroutine. Once it 
reaches the end of the subroutine it returns to the main program, and 
continues to run the code where it left off previously.</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><br></div><font color="#010101" ><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ></font><font face="Arial" ><span style="font-size:12pt" >Normally, it is possible for subroutines to call other subroutines. There are 
limits to the number of times that a subroutine can call another sub, which 
vary from chip to chip:</span></font><font color="#010101" ></font></div><div align="left" ><font color="#010101" ></font></div><table border="1"  width="576"  cellpadding="3"  cellspacing="0"  style="border-collapse: collapse; border: none" >
    <tr>
    <td align="center"  valign="top"  width="183"  style="border: solid #010101 1px;" >
    <div align="center" ><font face="Arial"  color="#010101" ><span style="font-size:12pt" ><b>PIC Family</b></span></font><font color="#010101" ></font></div>
    </td>
    <td align="center"  valign="top"  width="183"  style="border: solid #010101 1px;" >
    <div align="center" ><font face="Arial"  color="#010101" ><span style="font-size:12pt" ><b>Instruction Width</b></span></font><font color="#010101" ></font></div>
    </td>
    <td align="center"  valign="top"  width="183"  style="border: solid #010101 1px;" >
    <div align="center" ><font face="Arial"  color="#010101" ><span style="font-size:12pt" ><b>Number of subs called</b></span></font><font color="#010101" ></font></div>
    </td></tr>
    <tr>
    <td align="center"  valign="top"  width="183"  style="border: solid #010101 1px;" >
    <div align="center" ><font face="Arial" ><span style="font-size:12pt" >10F*, 12C5*, 12F5*, 
    16C5*, 16F5* </span></font><font color="#010101" ></font></div>
    </td>
    <td align="center"  valign="top"  width="183"  style="border: solid #010101 1px;" >
    <div align="center" ><font face="Arial" ><span style="font-size:12pt" >12</span></font><font color="#010101" ></font></div>
    </td>
    <td align="center"  valign="top"  width="183"  style="border: solid #010101 1px;" >
    <div align="center" ><font face="Arial" ><span style="font-size:12pt" >1</span></font><font color="#010101" ></font></div>
    </td></tr>
    <tr>
    <td align="center"  valign="top"  width="183"  style="border: solid #010101 1px;" >
    <div align="center" ><font face="Arial" ><span style="font-size:12pt" >12C*, 12F*, 16C*, 16F*, 
    except those above</span></font><font color="#010101" ></font></div>
    </td>
    <td align="center"  valign="top"  width="183"  style="border: solid #010101 1px;" >
    <div align="center" ><font face="Arial" ><span style="font-size:12pt" >14</span></font><font color="#010101" ></font></div>
    </td>
    <td align="center"  valign="top"  width="183"  style="border: solid #010101 1px;" >
    <div align="center" ><font face="Arial" ><span style="font-size:12pt" >7</span></font><font color="#010101" ></font></div>
    </td></tr>
    <tr>
    <td align="center"  valign="top"  width="183"  style="border: solid #010101 1px;" >
    <div align="center" ><font face="Arial" ><span style="font-size:12pt" >18F*, 18C*</span></font><font color="#010101" ></font></div>
    </td>
    <td align="center"  valign="top"  width="183"  style="border: solid #010101 1px;" >
    <div align="center" ><font face="Arial" ><span style="font-size:12pt" >16</span></font><font color="#010101" ></font></div>
    </td>
    <td align="center"  valign="top"  width="183"  style="border: solid #010101 1px;" >
    <div align="center" ><font face="Arial" ><span style="font-size:12pt" >31</span></font><font color="#010101" ></font></div>
    </td></tr></table><div align="left" ><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><font face="Arial" ><span style="font-size:12pt" >These limits are due to the amount of memory on the PIC which saves its 
location before it jumps to a new subroutine. Some GCBASIC commands 
are subroutines, so you should always allow for 2 or 3 subroutine calls 
more than your program has.</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><br></div><font color="#010101" ><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ></font><font face="Arial" ><span style="font-size:12pt" >AVR microcontrollers have no fixed limit on how many subroutines can be 
called at a time, but if too many are called then some variables on the 
chip may be corrupted. To check if there are too many subroutines, work 
out the most that will be called at once, then multiply that number by 2 and 
create an array of that size. If an out of memory error message comes up, 
there are too many calls.</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><br></div><font color="#010101" ><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ></font><font face="Arial" ><span style="font-size:12pt" >Another feature of subroutines is that they are able to accept parameters. 
These are values that are passed from the main program to the 
subroutine when it is called, and then passed back when the subroutine 
ends.</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><font face="Arial" ><span style="font-size:12pt" ><b>Using Subroutines</b></span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><br></div><font color="#010101" ><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ></font><font face="Arial" ><span style="font-size:12pt" >To call a subroutine is very simple - all that is needed is the name of the 
sub, and then a list of parameters. This code will call a subroutine named 
&quot;Buzz&quot; that has no parameters:</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><br></div><font color="#010101" ><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ></font><font face="Courier New" ><span style="font-size:10pt" >Buzz</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><br></div><font color="#010101" ><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ></font><font face="Arial" ><span style="font-size:12pt" >If the sub has parameters, then they should be listed after the name of the 
subroutine. This would be the command to call a subroutine named 
&quot;MoveArm&quot; that has three parameters:</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><br></div><font color="#010101" ><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ></font><font face="Microsoft Sans Serif" ><span style="font-size:10pt" >MoveArm NewX, NewY, 10</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><br></div><font color="#010101" ><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ></font><font face="Arial" ><span style="font-size:12pt" >If a subroutine has parameters, you may choose to put brackets around 
them, like so:</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><br></div><font color="#010101" ><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ></font><font face="Microsoft Sans Serif" ><span style="font-size:10pt" >MoveArm (NewX, NewY, 10)</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><br></div><font color="#010101" ><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ></font><font face="Arial" ><span style="font-size:12pt" >All that this does is change the appearance of the code - it doesn't make 
any difference to what the code does. Decide which one meets your own 
personal preference, and then stick with it.</span></font><font color="#010101" ></font></div><div align="left" ><br></div><font color="#010101" ><div align="left" ></font><font face="Arial" ><span style="font-size:12pt" ><b><i>Creating subroutines</i></b></span></font><font color="#010101" ></font></div><div align="left" ><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><font face="Arial" ><span style="font-size:12pt" >To create a subroutine is almost as simple as using one. There must be a 
line at the start which has &quot;sub &quot;, and then the name of the subroutine. 
Also, there needs to be a line at the end of the subroutine which reads 
&quot;end sub&quot;. To create a subroutine called &quot;Buzz&quot;, this is the required code:</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><br></div><font color="#010101" ><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ></font><font face="Courier New" ><span style="font-size:10pt" >sub Buzz</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><br></div><font color="#010101" ><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ></font><font face="Courier New" ><span style="font-size:10pt" >'code for the subroutine goes here</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><br></div><font color="#010101" ><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ></font><font face="Courier New" ><span style="font-size:10pt" >end sub</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><br></div><font color="#010101" ><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ></font><font face="Arial" ><span style="font-size:12pt" >If the subroutine has parameters, then they need to be listed after the 
name. For example, to define the &quot;MoveArm&quot; sub used above, use this 
code:</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><br></div><font color="#010101" ><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ></font><font face="Courier New" ><span style="font-size:10pt" >sub MoveArm(ArmX, ArmY, ArmZ)</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><br></div><font color="#010101" ><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ></font><font face="Courier New" ><span style="font-size:10pt" >'code for the subroutine goes here</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><br></div><font color="#010101" ><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ></font><font face="Courier New" ><span style="font-size:10pt" >end sub</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><br></div><font color="#010101" ><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ></font><font face="Arial" ><span style="font-size:12pt" >In the above sub, ArmX, ArmY and ArmZ are all variables. If the call from 
above is used, the variables will have these values at the start of the 
subroutine:</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><br></div><font color="#010101" ><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ></font><font face="Courier New" ><span style="font-size:10pt" >ArmX = NewX</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><font face="Courier New" ><span style="font-size:10pt" >ArmY = NewY</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><font face="Courier New" ><span style="font-size:10pt" >ArmZ = 10</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><br></div><font color="#010101" ><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ></font><font face="Arial" ><span style="font-size:12pt" >When the subroutine has finished running, GCBASIC will copy the values 
back where possible. NewX will be set to ArmX, and NewY to ArmY. 
GCBASIC will not attempt to set the number 10 to ArmZ.</span></font><font color="#010101" ></font></div><div align="left" ><br></div><font color="#010101" ><div align="left" ></font><font face="Arial" ><span style="font-size:12pt" ><b><i>Controlling the direction data moves in</i></b></span></font><font color="#010101" ></font></div><div align="left" ><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><font face="Arial" ><span style="font-size:12pt" >It is possible to instruct GCBASIC not to copy the value back after the 
subroutine is called. If a subroutine is defined like this:</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><br></div><font color="#010101" ><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ></font><font face="Microsoft Sans Serif" ><span style="font-size:10pt" >sub MoveArm(In ArmX, In ArmY, In ArmZ)</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><font color="#010101" ></font></div><div align="left"  style="margin-left:25mm; margin-right:0mm; text-indent:0mm; " ><font face="Microsoft Sans Serif" ><span style="font-size:10pt" >'code for the subroutine goes here</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><br></div><font color="#010101" ><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ></font><font face="Microsoft Sans Serif" ><span style="font-size:10pt" >end sub</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><br></div><font color="#010101" ><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ></font><font face="Arial" ><span style="font-size:12pt" >Then GCBASIC will copy the values to the subroutine, but will not copy 
them back.</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><br></div><font color="#010101" ><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ></font><font face="Arial" ><span style="font-size:12pt" >GCBASIC can also be prevented from copying the values back, by adding 
&quot;Out&quot; before the parameter name. This is used in the EEPROM reading 
routines - there is no point copying a data value into the read subroutine, 
so Out has been used to avoid wasting time and memory. The EPRead 
routine is defined as &quot;Sub EPRead(In Address, Out Data).</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><br></div><font color="#010101" ><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ></font><font face="Arial" ><span style="font-size:12pt" >Many older sections of code use &quot;#NR&quot; at the end of the line where the 
parameters are specified. The &quot;#NR&quot; means &quot;No Return&quot;, and when used 
has the same effect as adding &quot;In&quot; before every parameter. Use of &quot;#NR&quot; 
is not recommended, as it does not give the same level of control.</span></font><font color="#010101" ></font></div><div align="left" ><br></div><font color="#010101" ><div align="left" ></font><font face="Arial" ><span style="font-size:12pt" ><b><i>Using different data types for parameters</i></b></span></font><font color="#010101" ></font></div><div align="left" ><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><font face="Arial" ><span style="font-size:12pt" >It is possible to use any type of variable a as parameter for a subroutine. 
Just add &quot;As &quot; and then the data type to the end of the parameter name. 
For example, to make all of the parameters for the MoveArm subroutine 
word variables, use this code:</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><br></div><font color="#010101" ><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ></font><font face="Courier New" ><span style="font-size:10pt" >sub MoveArm(ArmX As Word, ArmY As Word, ArmZ As Word)</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:25mm; margin-right:0mm; text-indent:0mm; " ><font face="Courier New" ><span style="font-size:10pt" >...</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><font face="Courier New" ><span style="font-size:10pt" >end sub</span></font><font color="#010101" ></font></div><div align="left" ><br></div><font color="#010101" ><div align="left" ></font><font face="Arial" ><span style="font-size:12pt" ><b><i>Optional parameters</i></b></span></font><font color="#010101" ></font></div><div align="left" ><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><font face="Arial" ><span style="font-size:12pt" >Sometimes, the same value may be used over and over again for a 
parameter, except in a particular case. If this occurs, a default value may 
be specified for the parameter, and then a value for that parameter only 
needs to be given in a call if it is different to the default.</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><br></div><font color="#010101" ><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ></font><font face="Arial" ><span style="font-size:12pt" >For example, suppose a subroutine to create an error beep is required. 
Normally it emits a 440 Hz tone, but sometimes a different tone is 
required. To create the sub, this code would be used:</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><br></div><font color="#010101" ><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ></font><font face="Courier New" ><span style="font-size:10pt" >Sub ErrorBeep(Optional OutTone As Word = 440)</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><font face="Courier New" ><span style="font-size:10pt" >&nbsp;&nbsp;&nbsp;&nbsp;Tone OutTone, 100</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><font face="Courier New" ><span style="font-size:10pt" >End Sub</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><br></div><font color="#010101" ><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ></font><font face="Arial" ><span style="font-size:12pt" >Note the &quot;Optional&quot; before the parameter, and the &quot; = 440&quot; after it. This 
tells GCBASIC that if no parameter is supplied, then set the OutTone 
parameter to 440.</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><br></div><font color="#010101" ><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ></font><font face="Arial" ><span style="font-size:12pt" >If called using this line:</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><br></div><font color="#010101" ><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ></font><font face="Microsoft Sans Serif" ><span style="font-size:10pt" >ErrorBeep</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><br></div><font color="#010101" ><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ></font><font face="Arial" ><span style="font-size:12pt" >then a 440 Hz beep will be emitted. If called using this line:</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><br></div><font color="#010101" ><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ></font><font face="Microsoft Sans Serif" ><span style="font-size:10pt" >ErrorBeep 1000</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><br></div><font color="#010101" ><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ></font><font face="Arial" ><span style="font-size:12pt" >then the sub will produce a 1000 Hz tone.</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><br></div><font color="#010101" ><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ></font><font face="Arial" ><span style="font-size:12pt" >When using several parameters, it is possible to make any number of 
them optional. If the optional parameter/s are at the end of the call, then 
no value needs to be specified. If they are at the start or in the middle, 
then you must insert commas to allow GCBASIC to tell where the optional 
parameters are.</span></font><font color="#010101" ></font></div><div align="left" ><br></div><font color="#010101" ><div align="left" ></font><font face="Arial" ><span style="font-size:12pt" ><b><i>Overloading</i></b></span></font><font color="#010101" ></font></div><div align="left" ><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><font face="Arial" ><span style="font-size:12pt" >It is possible to have 2 subroutines with the same name, but different 
parameters. This is known as overloading, and GCBASIC will 
automatically select the most appropriate subroutine for each call.</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><br></div><font color="#010101" ><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ></font><font face="Arial" ><span style="font-size:12pt" >An example of this is the Print routine in the LCD routines. There are 
actually several Print subroutines; for example, one has a byte parameter, 
one a word parameter, and one a string parameter. If this command is 
used:</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><br></div><font color="#010101" ><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ></font><font face="Courier New" ><span style="font-size:10pt" >Print 100</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><br></div><font color="#010101" ><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ></font><font face="Arial" ><span style="font-size:12pt" >Then the Print (byte) subroutine will be called. However, if this command 
is used:</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><br></div><font color="#010101" ><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ></font><font face="Courier New" ><span style="font-size:10pt" >Print 30112</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><br></div><font color="#010101" ><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ></font><font face="Arial" ><span style="font-size:12pt" >Then the Print (word) subroutine will be called. If there is no exact match 
for a particular call, GCBASIC will use the option that requires the least 
conversion of variable types. For example, if this command is used:</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><br></div><font color="#010101" ><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ></font><font face="Courier New" ><span style="font-size:10pt" >Print PORTB.0</span></font><font color="#010101" ></font></div><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ><br></div><font color="#010101" ><div align="left"  style="margin-left:13mm; margin-right:0mm; text-indent:0mm; " ></font><font face="Arial" ><span style="font-size:12pt" >The byte print will be used. This is because byte is the closest type to the 
single bit parameter.</span></font><font color="#010101" ></font></div><div align="left" ><br></div><font color="#010101" ><div align="left" ></font><font face="Arial" ><span style="font-size:12pt" ><b>See Also </b></span></font><a href="functions.htm"><font face="Arial"  color="#0000ff" ><span style="font-size:12pt" ><u>Functions</u></span></font></a><font face="Arial" ><span style="font-size:12pt" >, </span></font><a href="exitsub.htm"><font face="Arial"  color="#0000ff" ><span style="font-size:12pt" ><u>Exit</u></span></font></a><font color="#010101" ></font></div>

</html>
